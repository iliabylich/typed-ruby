#!/usr/bin/env ruby

require 'bundler/setup'
require 'pry'
require 'typed_ruby'

registry = TypedRuby::Registry
registry.load_file('bin/smoke.sig')

def print_ivars(klass)
  klass.ivars.each do |ivar|
    puts "  @#{ivar.name} : #{ivar.type.inspect}"
  end
  puts if klass.ivars.any?
end

def print_methods(mod)
  mod.own_methods.each do |method|
    puts "  def #{method.name}(#{method.arguments.inspect}) : #{method.returns.inspect}"
  end
end

registry.types.each_value do |type|
  case type
  when TypedRuby::Signatures::Class
    print "class #{type.name}"
    if type.superclass
      puts " < #{type.superclass.name}"
    else
      puts
    end

    print_ivars(type)
    print_methods(type)

    puts "end"
  when TypedRuby::Signatures::Module
    puts "module #{type.name}"
    print_methods(type)
    puts "end"
  else
    # binding.pry
  end

#   print "class #{klass.name}"

#   if klass.superclass
#     puts " < #{klass.superclass.name}"
#   else
#     puts
#   end

#   klass.included_modules.each do |mod|
#     puts "  include #{mod.name}"
#   end

#   klass.prepended_modules.each do |mod|
#     puts "  prepend #{mod.name}"
#   end

#   klass.own_methods.each do |method|
#     puts "  def #{method.name}(#{method.arguments.map(&:inspect).join(', ')}): #{method.returns.inspect}"
#   end
#   puts "end"
# end

# registry.modules.each do |mod|
#   puts "class #{mod.name}"

#   mod.included_modules.each do |mod|
#     puts "  include #{mod.name}"
#   end

#   mod.prepended_modules.each do |mod|
#     puts "  prepend #{mod.name}"
#   end

#   mod.own_methods.each do |method|
#     puts "  def #{method.name}(#{method.arguments.map(&:inspect).join(', ')}): #{method.returns.inspect}"
#   end
#   puts "end"
# end

end
