register_class(
  Signatures::Class.new(
    name: 'Module',
    superclass: find_class('Object'),
    included_modules: [],
    prepended_modules: [],
    own_methods: [
      Signatures::AnyMethod.new(name: '<'),
      Signatures::AnyMethod.new(name: '<='),
      Signatures::AnyMethod.new(name: '<=>'),
      Signatures::AnyMethod.new(name: '=='),
      Signatures::AnyMethod.new(name: '==='),
      Signatures::AnyMethod.new(name: '>'),
      Signatures::AnyMethod.new(name: '>='),
      Signatures::AnyMethod.new(name: 'alias_method'),
      Signatures::AnyMethod.new(name: 'ancestors'),
      Signatures::AnyMethod.new(name: 'attr'),
      Signatures::AnyMethod.new(name: 'attr_accessor'),
      Signatures::AnyMethod.new(name: 'attr_reader'),
      Signatures::AnyMethod.new(name: 'attr_writer'),
      Signatures::AnyMethod.new(name: 'autoload'),
      Signatures::AnyMethod.new(name: 'autoload?'),
      Signatures::AnyMethod.new(name: 'class_eval'),
      Signatures::AnyMethod.new(name: 'class_exec'),
      Signatures::AnyMethod.new(name: 'class_variable_defined?'),
      Signatures::AnyMethod.new(name: 'class_variable_get'),
      Signatures::AnyMethod.new(name: 'class_variable_set'),
      Signatures::AnyMethod.new(name: 'class_variables'),
      Signatures::AnyMethod.new(name: 'const_defined?'),
      Signatures::AnyMethod.new(name: 'const_get'),
      Signatures::AnyMethod.new(name: 'const_missing'),
      Signatures::AnyMethod.new(name: 'const_set'),
      Signatures::AnyMethod.new(name: 'constants'),
      Signatures::AnyMethod.new(name: 'define_method'),
      Signatures::AnyMethod.new(name: 'deprecate_constant'),
      Signatures::AnyMethod.new(name: 'freeze'),
      Signatures::AnyMethod.new(name: 'include'),
      Signatures::AnyMethod.new(name: 'include?'),
      Signatures::AnyMethod.new(name: 'included_modules'),
      Signatures::AnyMethod.new(name: 'inspect'),
      Signatures::AnyMethod.new(name: 'instance_method'),
      Signatures::AnyMethod.new(name: 'instance_methods'),
      Signatures::AnyMethod.new(name: 'method_defined?'),
      Signatures::AnyMethod.new(name: 'module_eval'),
      Signatures::AnyMethod.new(name: 'module_exec'),

      Signatures::Method.new(
        name: 'name',
        arguments: [],
        returns: Types::InstanceOf.new('String')
      ),

      Signatures::AnyMethod.new(name: 'prepend'),
      Signatures::AnyMethod.new(name: 'private_class_method'),
      Signatures::AnyMethod.new(name: 'private_constant'),
      Signatures::AnyMethod.new(name: 'private_instance_methods'),
      Signatures::AnyMethod.new(name: 'private_method_defined?'),
      Signatures::AnyMethod.new(name: 'protected_instance_methods'),
      Signatures::AnyMethod.new(name: 'protected_method_defined?'),
      Signatures::AnyMethod.new(name: 'public_class_method'),
      Signatures::AnyMethod.new(name: 'public_constant'),
      Signatures::AnyMethod.new(name: 'public_instance_method'),
      Signatures::AnyMethod.new(name: 'public_instance_methods'),
      Signatures::AnyMethod.new(name: 'public_method_defined?'),
      Signatures::AnyMethod.new(name: 'remove_class_variable'),
      Signatures::AnyMethod.new(name: 'remove_method'),
      Signatures::AnyMethod.new(name: 'singleton_class?'),
      Signatures::AnyMethod.new(name: 'to_s'),
      Signatures::AnyMethod.new(name: 'undef_method'),
    ]
  )
)
